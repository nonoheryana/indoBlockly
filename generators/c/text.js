/**
 * Visual Blocks Language
 *
 * Copyright 2012 Google Inc.
 * http://code.google.com/p/blockly/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Generating Dart for text blocks.
 * @author fraser@google.com (Neil Fraser)
 * Due to the frequency of long strings, the 80-column wrap rule need not apply
 * to language files.
 * 
 * MODIFIED BY INDOBLOCKLY
 * aanx04 2012
 */

Blockly.C = Blockly.Generator.get('C');

Blockly.C.text = function() {
  // Text value.
  return Blockly.C.quote_(this.getTitleText('TEXT'));
};

Blockly.C.text_join = function(opt_dropParens) {
  // Create a string made up of any number of elements of any type.
  
  
  if (this.itemCount_ == 0) {
    return '\'\'';
  } else if (this.itemCount_ == 1) {
    var argument0 = Blockly.C.valueToCode(this, 'ADD0', true) || '\'\'';
    return argument0;
  } else if (this.itemCount_ == 2) {
    var argument0 = Blockly.C.valueToCode(this, 'ADD0') || '\'\'';
    var argument1 = Blockly.C.valueToCode(this, 'ADD0') || '\'\'';
       
           
    var code = argument0  + ',' + argument1;
    if (!opt_dropParens) {
      code = 'strcat(' + code + ')';
    }
     code = 'strcat(' + code + ')';
    return code;
  } else {
    var code = [];
    code[0] = (Blockly.C.valueToCode(this, 'ADD0', true) || '\'\'');
    for (n = 1; n < this.itemCount_; n++) {
      code[n] = ',' + (Blockly.C.valueToCode(this, 'ADD' + n, true) || '\'\'');
    }
    code = code.join('');
   
    if (!opt_dropParens) {
      code = 'char hasil['+Blockly.C.maxChar+']\nchar buffer('+Blockly.C.maxChar+')' + code;
    }
    return code;
  }
};

Blockly.C.text_length = function() {
  // String length.
  var argument0 = Blockly.C.valueToCode(this, 'VALUE') || '\'\'';
  var tipe = Blockly.C.listTypeVar[argument0];
  if(tipe!=undefined){
     if(tipe=='int'){
         return 'sizeof(int)';
     } else if(tipe.match(/arrayint/g)){
         return 'sizeof('+argument0+')/sizeof(int)';
     } else if(tipe.match(/arraychar/g)){
         return 'sizeof('+argument0+')/sizeof(char)';
     } 
  }
  
  return 'strlen('+argument0 + ')';
};

Blockly.C.text_isEmpty = function() {
  // Is the string null?
  var argument0 = Blockly.C.valueToCode(this, 'VALUE') || '\'\'';
  Blockly.C.definitions_['isempty'] = 
     '\n//---FUNCTION GENERATED BY INDOBLOCKLY-----------\n'+
    'int isEmpty(char *teks){\n'+
    '  if(teks[0]==\'\\0\' || teks == NULL)\n'+
    '    return 1;\n'+
    '  else \n'+
    '    return 0;\n'+
    '}\n//-------------------------------------------\n\n';
  
  return  'isEmpty('+argument0+')';
};

Blockly.C.text_endString = function() {
  // Return a leading or trailing substring.
  var first = this.getInputLabelValue('NUM') == 'FIRST';
  var code;
  if (first) {
    var argument0 = Blockly.C.valueToCode(this, 'NUM', true) || '1';
    var argument1 = Blockly.C.valueToCode(this, 'TEXT') || '\'\'';
    code =   'substring('+argument1+', 0,' + argument0 + ')';
  } else {
    var argument0 = Blockly.C.valueToCode(this, 'NUM') || '1';
    var argument1 = Blockly.C.valueToCode(this, 'TEXT', true) || '\'\'';
    code = 'substring(' + argument1 + ', strlen('+argument1+')-'+argument0+',' + argument0 + ')';
  }
  
  Blockly.C.definitions_['substring'] = 
      '\n//---FUNCTION GENERATED BY INDOBLOCKLY-----------\n'+
      'char hasilSubstring[maxChar];\n'+
      '//-inti dari skrip ini adalah membuat salinan variabel char namun awal alamat memori di tambah nilai int start\n'+
      'char *substring (char *teks,int start,int ambil){\n'+
      '    if(start+ambil>maxChar)\n'+
      '      printf("karakter yang diambil tidak mencukupi untuk disimpan di memori");\n'+
      '    else\n'+
       '     strncpy(hasilSubstring,teks+ambil,ambil);\n'+
       '   return hasilSubstring;\n'+
       '}\n//-------------------------------------------\n\n';
  return code;
};

Blockly.C.text_indexOf = function(opt_dropParens) {
  // Search the text for a substring.
  var operator = this.getTitleValue('END') == 'FIRST' ? 'indexOf' : 'lastIndexOf';
  var argument0 = Blockly.C.valueToCode(this, 'FIND') || '\'\'';
  var argument1 = Blockly.C.valueToCode(this, 'VALUE') || '\'\'';
  var code = argument1 + '.' + operator + '(' + argument0 + ') + 1';
  if (!opt_dropParens) {
    code = '(' + code + ')';
  }
  return code;
};

Blockly.C.text_charAt = function() {
  // Get letter at index.
  var argument0 = Blockly.C.valueToCode(this, 'AT', true) || '1';
  var argument1 = Blockly.C.valueToCode(this, 'VALUE') || '[]';
  // Blockly uses one-based arrays.
  if (argument0.match(/^\d+$/)) {
    // If the index is a naked number, decrement it right now.
    argument0 = parseInt(argument0, 10) - 1;
    if(argument0==-1){
        argument0=0;
    }
  } else {
    // If the index is dynamic, decrement it in code.
    argument0 += ' - 1';
  }
  return argument1 + '[' + argument0 + ']';
};

Blockly.C.text_changeCase = function() {
  // Change capitalization.
  var mode = this.getInputLabelValue('TEXT');
  var operator = Blockly.C.text_changeCase.OPERATORS[mode];
  var code;
  if (operator) {
    // Upper and lower case are functions built into Dart.
    var argument0 = Blockly.C.valueToCode(this, 'TEXT') || '\'\'';
    code = operator + argument0 +')' ;
  } else {
    if (!Blockly.C.definitions_['toTitleCase']) {
      // Title case is not a native Dart function.  Define one.
      var functionName = Blockly.C.variableDB_.getDistinctName('text_toTitleCase',
          Blockly.Generator.NAME_TYPE);
      Blockly.C.text_changeCase.toTitleCase = functionName;
      var func = [];
      func.push('String ' + functionName + '(str) {');
      func.push('  RegExp exp = const RegExp(@"(\\w\\S*)");');
      func.push('  List<String> list = str.split(exp);');
      func.push('  String title = \'\';');
      func.push('  for (String part in list) {');
      func.push('    if (part.length > 0) {');
      func.push('      title += part[0].toUpperCase();');
      func.push('      if (part.length > 0) {');
      func.push('        title += part.substring(1).toLowerCase();');
      func.push('      }');
      func.push('    }');
      func.push('  }');
      func.push('  return title;');
      func.push('}');
      Blockly.C.definitions_['toTitleCase'] = func.join('\n');
    }
    var argument0 = Blockly.C.valueToCode(this, 'TEXT', true) || '\'\'';
    code = Blockly.C.text_changeCase.toTitleCase + '(' + argument0 + ')';
  }
  return code;
};

Blockly.C.text_changeCase.OPERATORS = {
  UPPERCASE: 'strupr(',
  LOWERCASE: 'strlwr(',
  TITLECASE: null
};

Blockly.C.text_trim = function() {
  // Trim spaces.
  var mode = this.getTitleValue('MODE');
  var operator = Blockly.C.text_trim.OPERATORS[mode];
  var argument0 = Blockly.C.valueToCode(this, 'TEXT') || '\'\'';
  Blockly.C.definitions_['trim'] = 
      '\n//---FUNCTION GENERATED BY INDOBLOCKLY-----------------\n'+
       '//---fungsi ini hanya menghilangkan satu spasi saja di depan atau belakang-----------------\n\n'+
      'char hasilTrim[maxChar];\n\nchar *trim(char * teks, char *tipe){\n'+
   '  if(strcmp(teks,"both")){\n'+
    '   if(isspace(teks[0])!=0 && isspace(teks[strlen(teks)-1])!=0){\n'+
    '       strncpy(hasilTrim,teks,maxChar);\n'+
    '        int i=1,j=0;\n'+
    '        for(i=1;i&lt;strlen(teks);i++){\n'+
    '           if(teks[i]!=\'\\0\'){\n'+
    '               hasilTrim[j] = teks[i];\n'+
    '                j++;\n'+
    '            }\n'+
    '        }\n'+
    '        hasilTrim[j-1] = \'\\0\';\n'+
    '        return hasilTrim;\n'+
    '    }'+
     '    else{\n'+    
        '        return teks;\n'+
    '     }\n'+
   '  }else if(strcmp(teks,"left")){\n'+
    '  if(isspace(teks[0])!=0){\n'+
     '      strncpy(hasilTrim,teks,maxChar);\n'+
     '       int i=1,j=0;\n'+
     '       for(i=1;i&lt;strlen(teks);i++){\n'+
     '           if(teks[i]!=\'\\0\'){\n'+
     '               hasilTrim[j] = teks[i];\n'+
    '                j++;\n'+
    '            }\n'+
    '        }\n'+
    '        return hasilTrim;\n'+
    '    }'+
     '     else{\n'+    
        '        return teks;\n'+
    '     }\n'+
   ' }else if(strcmp(teks,"right")){\n'+
   '  if(isspace(teks[strlen(teks)])!=0){\n'+
     '   strncpy(hasilTrim,teks,maxChar);\n'+
     '   hasilTrim[strlen(hasilTrim)-1] = \'\\0\';\n'+
    '    return hasilTrim;\n'+
    '     }else{\n'+    
        '        return teks;\n'+
    '    }'+
    ' } else{\n'+    
        '        return teks;\n'+
    '  }\n'+
'}\n'+
'//---------------------------------------------------------------\n\n'
;
  return 'trim('+argument0 +',"'+ operator+'")';
};

Blockly.C.text_trim.OPERATORS = {
  LEFT: 'left',
  RIGHT: 'right',
  BOTH: 'both'
};

Blockly.C.text_print = function() {
  // Print statement.
  var format = '';
  var argument0 = Blockly.C.valueToCode(this, 'TEXT', true) || '\'\'';
  
  
      var newArg = argument0.split(',');
      var cekFungsiReturnChar = /^(strlwr\(|strupr\(|substring\(|trim\()[\w\W]*/g;
      var cekFungsiReturnFloat = /^(sqrt\(|floor\(|ceil\(|sin\(|cos\(|tan\(|asin\(|acos\(|atan\(|log\(|log10\(|exp\(|pow\()[\w\W]*/g;

      
      for(var i=0;i<newArg.length;i++){
           
          if(newArg[i]=='"\\\\n"'){
              //berupa enter
              
              format += '%s\\n';
              argument0 = argument0.replace(/\\\\n/g,'');
              
          }else if(newArg[i]=='\'\''){
              //berupa enter
              
              format += '%s ';
              argument0 = argument0.replace(/\'\'/g,'""');
              
          }else if(newArg[i].match(cekFungsiReturnFloat)){
              //berupa fungsi return float
              format += '%.2f ';
                            
          }else if(newArg[i].match(cekFungsiReturnChar)){
              //fungsi2 penghasil string strupr,strlwr,
             
              format += '%s ';
          }else if(newArg[i].match(/^[0-9]+$/g)){
              //berupa angka
              format += "%d ";
          }else if(newArg[i].match(/^"[\w\W]+"$/g)){
              //string murni
             
              format += '%s ';
          }else if(newArg[i].match(/^[a-zA-Z_0-9]+$/g)){
              //berupa variabel
              
              if(Blockly.C.listTypeVar[newArg[i]]!=undefined){
                  if(Blockly.C.listTypeVar[newArg[i]]=='char'){
                      format += '%s ';
                  }else if(Blockly.C.listTypeVar[newArg[i]]=='int'){
                      format += '%d ';
                  }else{
                      format += '%d ';
                  }
              }
          }else if(newArg[i].match(/^[a-zA-Z_]+\[[\w\W\s]*\]$/g)){
              //berupa index suatu array
              //tentukan array jenis apa
              
              var ambilVar = newArg[i].replace(/\[[\w\W\s]*\]/g,'');
              if(Blockly.C.listTypeVar[ambilVar]!=undefined){
                  if(Blockly.C.listTypeVar[ambilVar].match(/arrayint/g)){
                      format += '%d ';
                  }if(Blockly.C.listTypeVar[ambilVar].match(/arraychar/g)){
                      format += '%s ';
                  }
              }
          }else{
              format += '%u ';
          }
      }
 
  
  return 'printf("'+format+'\\n",' + argument0 + ');\n';
};

Blockly.C.text_prompt = function() {
  // Prompt function.
  Blockly.C.definitions_['import_dart_html'] = '#import(\'dart:html\');';
  var msg = Blockly.C.quote_(this.getTitleValue('TEXT'));
  var code = 'window.prompt(' + msg + ', \'\')';
  var toNumber = this.getTitleValue('TYPE') == 'NUMBER';
  if (toNumber) {
    code = 'Math.parseDouble(' + code + ')';
  }
  return code;
};

